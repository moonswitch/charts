apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.name }}
spec:
  schedule: {{ .Values.schedule | quote }}
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 3
  suspend: false
  jobTemplate:
    spec:
      backoffLimit: 6
      completions: 1
      parallelism: 1
      template:
        metadata:
          labels:
            app: {{ .Values.name }}
        spec:
          restartPolicy: OnFailure
          containers:
            - name: dns-canary
              image: amazon/aws-cli
              imagePullPolicy: Always
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  TARGET="http://{{ .Values.targetService }}"

                  if curl --max-time 3 -sSf $TARGET; then
                    echo "$(date) DNS Canary check passed for $TARGET"
                  else
                    echo "$(date) DNS Canary check failed for $TARGET" >&2

                    if [ -n "{{ .Values.cloudwatchLogGroup }}" ]; then
                      echo "Sending failure log to CloudWatch"
                      aws logs put-log-events \
                        --log-group-name "{{ .Values.cloudwatchLogGroup }}" \
                        --log-stream-name "dns-canary-{{ .Values.name }}" \
                        --log-events "timestamp=$(date +%s%3N),message=\"DNS Canary failure: $TARGET\""
                    fi

                    if [ -n "{{ .Values.alertSnsTopicArn }}" ]; then
                      echo "Triggering SNS alert"
                      aws sns publish \
                        --topic-arn "{{ .Values.alertSnsTopicArn }}" \
                        --message "DNS Canary failure detected for $TARGET in cluster {{ .Values.clusterName }}"
                    fi
                  fi
              resources: {}