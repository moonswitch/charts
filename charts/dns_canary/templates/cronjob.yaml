apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.name }}
spec:
  schedule: {{ .Values.schedule | quote }}
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 3
  suspend: false
  jobTemplate:
    spec:
      backoffLimit: 6
      completions: 1
      parallelism: 1
      template:
        metadata:
          labels:
            app: {{ .Values.name }}
        spec:
          {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          serviceAccountName: {{ include "dns-canary.serviceAccountName" . }}
          securityContext:
            {{- toYaml .Values.podSecurityContext | nindent 12 }}
          containers:
            - name: {{ .Chart.Name }}
              securityContext:
                {{- toYaml .Values.securityContext | nindent 16 }}
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  TARGET="http://{{ .Values.targetService }}"

                  if curl --max-time 3 -sSf $TARGET; then
                    echo "$(date) DNS Canary check passed for $TARGET"
                  else
                    echo "$(date) DNS Canary check failed for $TARGET" >&2

                    if [ -n "{{`{{ .Values.cloudwatchLogGroup }}`}}" ]; then
                      echo "Sending failure log to CloudWatch"
                      aws logs put-log-events \
                        --log-group-name "{{`{{ .Values.cloudwatchLogGroup }}`}}" \
                        --log-stream-name "dns-canary-{{`{{ .Values.name }}`}}" \
                        --log-events "timestamp=$(date +%s%3N),message=\"DNS Canary failure: $TARGET\""
                    fi

                    if [ -n "{{`{{ .Values.alertSnsTopicArn }}`}}" ]; then
                      echo "Triggering SNS alert"
                      aws sns publish \
                        --topic-arn "{{`{{ .Values.alertSnsTopicArn }}`}}" \
                        --message "DNS Canary failure detected for $TARGET in cluster {{`{{ .Values.clusterName }}`}}"
                    fi
                  fi
              ports:
                - name: http
                  containerPort: {{ .Values.service.port }}
                  protocol: TCP
              livenessProbe:
                {{- toYaml .Values.livenessProbe | nindent 16 }}
              readinessProbe:
                {{- toYaml .Values.readinessProbe | nindent 16 }}
              resources:
                {{- toYaml .Values.resources | nindent 16 }}
              {{- with .Values.volumeMounts }}
              volumeMounts:
                {{- toYaml . | nindent 16 }}
              {{- end }}
          {{- with .Values.volumes }}
          volumes:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}